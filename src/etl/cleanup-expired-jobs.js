#!/usr/bin/env node

/**
 * Database Cleanup Script (Expired Jobs + Duplicates)
 * 
 * This script removes:
 * 1. Job vacancies where the end_date (application deadline) has passed
 * 2. Duplicate job entries (keeps the most recent one)
 * 
 * Usage:
 *   node src/etl/cleanup-expired-jobs.js           # Run cleanup
 *   node src/etl/cleanup-expired-jobs.js --dry-run # Preview what would be deleted
 *   node src/etl/cleanup-expired-jobs.js --help    # Show help
 * 
 * Safety Features:
 *   - Dry run mode to preview changes
 *   - Detailed logging and statistics
 *   - Only removes jobs where end_date < NOW()
 *   - Removes duplicates but keeps the most recent copy
 *   - Preserves all active jobs (end_date >= today)
 */

require('dotenv').config();
const { cleanupExpiredAndDuplicateJobs, getJobsExpiringSoon } = require('./shared');

// Parse command line arguments
const args = process.argv.slice(2);
const isDryRun = args.includes('--dry-run') || args.includes('-d');
const showHelp = args.includes('--help') || args.includes('-h');

function showHelpMessage() {
  console.log(`
üßπ Database Cleanup Script (Expired Jobs + Duplicates)
======================================================

This script cleans up the database by removing:
1. Job vacancies where the application deadline (end_date) has passed
2. Duplicate job entries (keeps the most recent copy)

Usage:
  node src/etl/cleanup-expired-jobs.js [options]

Options:
  --dry-run, -d    Preview what would be deleted without making changes
  --help, -h       Show this help message

Examples:
  node src/etl/cleanup-expired-jobs.js              # Clean up database
  node src/etl/cleanup-expired-jobs.js --dry-run    # Preview cleanup

Safety:
  ‚úÖ Only removes jobs where end_date < current date
  ‚úÖ Removes duplicates but keeps the most recent copy
  ‚úÖ Never touches active job postings  
  ‚úÖ Includes detailed logging and statistics
  ‚úÖ Logs all activities to ETL monitoring table

The cleanup ensures database integrity by removing expired jobs and eliminating
duplicate entries that may have slipped through the ETL process.
`);
}

async function main() {
  try {
    // Show help if requested
    if (showHelp) {
      showHelpMessage();
      process.exit(0);
    }

    console.log('üßπ ==========================================');
    console.log('üìÖ Expired Job Cleanup Script');
    console.log('============================================');
    console.log(`üìÖ Current Date: ${new Date().toDateString()}`);
    console.log(`üîç Mode: ${isDryRun ? 'DRY RUN (Preview Only)' : 'LIVE CLEANUP'}`);
    console.log('============================================\n');

    // First, show jobs that are expiring soon (helpful context)
    console.log('üìä Jobs Expiring in Next 7 Days:');
    const expiringSoon = await getJobsExpiringSoon(7);
    
    if (expiringSoon.totalExpiring > 0) {
      console.log(`‚ö†Ô∏è  ${expiringSoon.totalExpiring} jobs expiring within 7 days:`);
      expiringSoon.organizationBreakdown.forEach(org => {
        console.log(`   üìÅ ${org.data_source.toUpperCase()}: ${org.expiring_count} jobs (next expires: ${new Date(org.soonest_expiry).toDateString()})`);
      });
    } else {
      console.log('‚úÖ No jobs expiring in the next 7 days');
    }

    console.log('\n' + '='.repeat(50));

    // Run the cleanup
    const stats = await cleanupExpiredAndDuplicateJobs(null, isDryRun);

    // Show final summary
    console.log('\nüìà CLEANUP SUMMARY:');
    console.log('==================');
    console.log(`üìä Total Issues Found: ${stats.totalExpiredJobs + stats.totalDuplicateJobs}`);
    console.log(`   üìÖ Expired Jobs: ${stats.totalExpiredJobs}`);
    console.log(`   üîÑ Duplicate Jobs: ${stats.totalDuplicateJobs}`);
    
    if (isDryRun) {
      console.log('üîç DRY RUN - No changes made');
      console.log('üí° Run without --dry-run to actually clean up the database');
    } else {
      const totalDeleted = stats.deletedExpiredJobs + stats.deletedDuplicateJobs;
      console.log(`üóëÔ∏è  Total Jobs Deleted: ${totalDeleted}`);
      console.log(`   üìÖ Expired: ${stats.deletedExpiredJobs}`);
      console.log(`   üîÑ Duplicates: ${stats.deletedDuplicateJobs}`);
      console.log(`‚úÖ Database cleaned successfully`);
    }
    
    console.log(`‚è±Ô∏è  Duration: ${stats.durationSeconds}s`);

    // Show organization breakdown if there were expired jobs
    if (stats.totalExpiredJobs > 0) {
      console.log('\nüìÅ Breakdown by Organization:');
      Object.entries(stats.organizationBreakdown).forEach(([org, info]) => {
        console.log(`   ${org.toUpperCase()}: ${info.count} expired jobs`);
      });
    }

    // Exit with appropriate code
    process.exit(stats.errorCount > 0 ? 1 : 0);

  } catch (error) {
    console.error('\n‚ùå SCRIPT FAILED:');
    console.error('==================');
    console.error('Error:', error.message);
    console.error('\nStack trace:', error.stack);
    
    process.exit(1);
  }
}

// Handle process interruption gracefully
process.on('SIGINT', () => {
  console.log('\n\n‚ö†Ô∏è  Script interrupted by user');
  console.log('‚úÖ No database changes were made');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n\n‚ö†Ô∏è  Script terminated');
  process.exit(0);
});

// Run the script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Unhandled error:', error);
    process.exit(1);
  });
}

module.exports = { main }; 